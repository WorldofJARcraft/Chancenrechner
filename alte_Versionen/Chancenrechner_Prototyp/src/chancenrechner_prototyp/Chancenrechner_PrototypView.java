/*
 * Chancenrechner_PrototypView.java
 */
package chancenrechner_prototyp;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;
import javax.swing.ButtonGroup;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 * The application's main frame.
 */
public class Chancenrechner_PrototypView extends FrameView {

    public Chancenrechner_PrototypView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Chancenrechner_PrototypApp.getApplication().getMainFrame();
            aboutBox = new Chancenrechner_PrototypAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Chancenrechner_PrototypApp.getApplication().show(aboutBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jFrame3 = new javax.swing.JFrame();
        jFrame4 = new javax.swing.JFrame();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(chancenrechner_prototyp.Chancenrechner_PrototypApp.class).getContext().getResourceMap(Chancenrechner_PrototypView.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jRadioButton1.setText(resourceMap.getString("jRadioButton1.text")); // NOI18N
        jRadioButton1.setName("jRadioButton1"); // NOI18N

        jRadioButton2.setText(resourceMap.getString("jRadioButton2.text")); // NOI18N
        jRadioButton2.setName("jRadioButton2"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton1)
                    .addComponent(jButton1))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jRadioButton1.setSelected(true);
        ButtonGroup bg = new ButtonGroup();
        bg.add(jRadioButton1);
        bg.add(jRadioButton2);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(chancenrechner_prototyp.Chancenrechner_PrototypApp.class).getContext().getActionMap(Chancenrechner_PrototypView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jFrame1.setName("jFrame1"); // NOI18N

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jFrame2.setName("jFrame2"); // NOI18N

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jFrame3.setName("jFrame3"); // NOI18N

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jFrame4.setName("jFrame4"); // NOI18N

        javax.swing.GroupLayout jFrame4Layout = new javax.swing.GroupLayout(jFrame4.getContentPane());
        jFrame4.getContentPane().setLayout(jFrame4Layout);
        jFrame4Layout.setHorizontalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame4Layout.setVerticalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // TODO code application logic here:
        //Textarea mit Infos für Schütze, das noch irgendwo platziert werden muss
        JTextArea Schuetze = new JTextArea();
        boolean frischgenullt = false;
        boolean nurabgearbeitet = false;
        int zwischensumme;
        int haeuf = 0;
        int welch = 0;
        int schuesse;
        if (jRadioButton1.isSelected()) {
            schuesse = 10;
        } else {
            schuesse = 20;
        }
        int Punkte = 10;
        int maxPkt = schuesse * Punkte;
        int aktuell = 0;
        int[] zahl = new int[11];
        for (int i = 0; i < 11; i++) {
            zahl[i] = 0;
        }
        int gesamt = 0;

        int[] ergebnisse = new int[schuesse];
        boolean falsch = true;
        Scanner scanner = new Scanner(System.in);
        System.out.print("Zielpunkte:");
        int ziel = scanner.nextInt();
        if (ziel > maxPkt || ziel < 0) {
            System.out.println("Eingabefehler.");
        } else {
            int optimum = ziel / schuesse;
            if (ziel % schuesse != 0) {
                optimum++;
            }
            zahl[optimum] = schuesse;
            System.out.println("Empfehlungen werden gegeben zum Erreichen von " + (optimum * schuesse) + " Punkten.");
            System.out.println("Ihr Ziel: durschschnittlich " + optimum + " Punkte.");
            Schuetze.append("Ihr Ziel: durschschnittlich " + optimum + " Punkte.");
            for (int i = 0; i < schuesse; i++) {
                frischgenullt = false;
                while (falsch) {
                    System.out.print("Schuss " + (i + 1) + ": ");
                    aktuell = scanner.nextInt();
                    if (aktuell >= 0 && aktuell <= 10) {
                        falsch = false;
                    } else {
                        System.out.println("Eingabefehler. Frage erneut ab.");
                    }
                }
                falsch = true;
                gesamt += aktuell;
                ergebnisse[i] = aktuell;
                System.out.println("Ergebnisse der Schüsse: ");
                Schuetze.append("Ergebnisse der Schüsse: ");
                for (int j = 0; j <= i; j++) {
                    System.out.print(ergebnisse[j] + ";");
                    Schuetze.append(ergebnisse[j] + ";");
                }
                System.out.println("");
                if (gesamt >= ziel) {
                    System.out.println("Mit " + gesamt + " Punkten haben Sie Ihr Ziel von " + ziel + " Punkten erreicht. Ihnen stehen noch " + (schuesse - (i + 1)) + " Schüsse zur Verfügung.");
                    Schuetze.append("Mit " + gesamt + " Punkten haben Sie Ihr Ziel von " + ziel + " Punkten erreicht. Ihnen stehen noch " + (schuesse - (i + 1)) + " Schüsse zur Verfügung.");
                    break;
                } else {
                    System.out.println("Bisherige Gesamtpunktzahl: " + gesamt + ", noch zu erreichen: " + (ziel - gesamt) + " Punkte.");
                    Schuetze.append("Bisherige Gesamtpunktzahl: " + gesamt + ", noch zu erreichen: " + (ziel - gesamt) + " Punkte.");
                }
                nurabgearbeitet = false;
                if (aktuell < optimum) {
                    if (zahl[optimum] > 0 && zahl[aktuell] <= 0) {
                        zahl[optimum]--;
                    }
                    if (zahl[aktuell] > 0) {
                        zahl[aktuell]--;
                        nurabgearbeitet = true;
                    } else {
                        welch = 0;
                        haeuf = 0;
                        if (optimum + (optimum - aktuell) >= 0 && optimum + (optimum - aktuell) <= 10) {
                            zahl[optimum + (optimum - aktuell)]++;
                        } else {
                            welch = optimum + (optimum - aktuell);
                            while (welch > 10) {
                                welch--;
                                haeuf++;
                            }
                            zwischensumme = 0;
                            for (int j = 0; j < 11; j++) {
                                zwischensumme += zahl[j] * j;
                            }
                            //nur erhöhen wenn nötig => nicht zu weit über Ziel hinaus
                            if (zwischensumme < (ziel - gesamt)) {
                                for (int j = 0; j < 11; j++) {
                                    zahl[j] = 0;
                                }
                                optimum = Math.round((((float) (((float)ziel - (float)gesamt) / ((float)schuesse - ((float)i + 1)))) + (float) 0.49));
                                //System.out.println("" + (((float) (((float)ziel - (float)gesamt) / ((float)schuesse - ((float)i + 1)))) + (float) 0.49));
                                frischgenullt = true;
                                if (optimum > 10) {
                                    System.out.println("Ziel nicht mehr erreichbar.");
                                    return;

                                } else {
                                    zahl[optimum] = schuesse - (i + 1);
                                }
                            }
                        }
                    }
                }
                if (aktuell > optimum && !frischgenullt) {
                    if (zahl[optimum] > 0 && zahl[aktuell] <= 0) {
                        zahl[optimum]--;
                    }
                    if (zahl[aktuell] > 0) {
                        zahl[aktuell]--;
                        nurabgearbeitet = true;
                    } else {

                        if (optimum - (aktuell - optimum) >= 0 && optimum - (aktuell - optimum) <= 10) {
                            zahl[optimum - (aktuell - optimum)]++;
                        } else {
                            welch = optimum - (aktuell - optimum);
                            while (welch < 0) {
                                welch++;
                                haeuf++;
                            }
                            zahl[welch] += haeuf;
                        }
                    }
                }
                if (zahl[optimum] > 0 && !nurabgearbeitet && !frischgenullt) {
                    zahl[optimum]--;
                }
                /*for (int j = 0; j < 11; j++) {

                 if (zahl[j] != 0) {
                 System.out.println("Sie müssen noch " + zahl[j] + " mal " + j + " Treffer erzielen.");
                 Schütze.append("Sie müssen noch " + zahl[j] + " mal " + j + " Treffer erzielen.");
                 }
                 }*/
                //zahl = sortieren(zahl, schüsse - i, optimum);
                if (i == schuesse && (ziel - gesamt) < 11) {
                    System.out.println("Sie müssen noch " + (ziel - gesamt) + "Treffer erzielen. Dies ist Ihr letzter Schuss.");
                }
                for (int j = 0; j < 11; j++) {

                    if (zahl[j] != 0) {
                        System.out.println("Sie müssen noch " + zahl[j] + " mal " + j + " Treffer erzielen.");
                        Schuetze.append("Sie müssen noch " + zahl[j] + " mal " + j + " Treffer erzielen.");
                    }
                }
                Schuetze.setText("");
            }
            Schuetze.setText("");
            System.out.println("Sie haben " + gesamt + " Punkte erzielt.");
            Schuetze.append("Sie haben " + gesamt + " Punkte erzielt.");
            if (gesamt >= ziel) {
                System.out.println("Herzlichen Glückwunsch, Sie haben Ihre Zielpunktzahl erreicht.");
                Schuetze.append("Herzlichen Glückwunsch, Sie haben Ihre Zielpunktzahl erreicht.");
            } else {
                System.out.println("Sie haben Ihr Ziel leider nicht erreicht.");
                Schuetze.append("Sie haben Ihr Ziel leider nicht erreicht.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JFrame jFrame4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    static private int[] sortieren(int[] zahl, int Rest, int optimum) {
        //Sortieren des Arrays
        //1. Fall: Ausgleichende Ziele
        for (int i = 0; i < optimum; i++) {
            while (zahl[i] > 0 && zahl[optimum + (optimum - i)] > 0) {
                System.out.println(i + ";" + (optimum + (optimum - i)));
                zahl[i]--;
                zahl[optimum + (optimum - i)]--;
                zahl[optimum] += 2;
            }
        }
        //2. Idee: Ziele mitteln, d.h. statt 1*0 und 1*8 2*4
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if ((i + j) % 2 == 0 && i != j) {
                    while (zahl[i] > 0 && zahl[j] > 0) {
                        zahl[i]--;
                        zahl[j]--;
                        zahl[(i + j) / 2] += 2;
                    }
                }

            }

        }
        return zahl;
    }
}
